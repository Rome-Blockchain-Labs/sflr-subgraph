type StakingTransaction @entity(immutable: false) {
  id: ID!
  user: Account! @index
  type: String! # "stake", "unlock_requested", "unlock_cancelled", "redeem", "redeem_overdue", "withdraw", "deposit", "transfer", "approve", "ksflr_transfer"
  flrAmount: BigInt!
  sflrAmount: BigInt!
  exchangeRate: BigInt!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
  unlockStartedAt: BigInt
  redeemableAt: BigInt
  expiresAt: BigInt
  status: String! # "completed", "pending", "cancelled", "expired"
  fromAddress: String @index
  toAddress: String @index
  spender: String @index
}

type ProtocolTransaction @entity(immutable: false) {
  id: ID!
  user: Account! @index
  type: String!
  flrAmount: BigInt!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
  status: String!
  fromAddress: String @index
  toAddress: String @index
}

type SwapTransaction @entity(immutable: false) {
  id: ID!
  user: Account! @index
  type: String!
  fromAmount: BigInt!
  toAmount: BigInt!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
  status: String!
  fromAddress: String @index
  toAddress: String @index
}

type UnlockRequest @entity(immutable: false) {
  id: ID!
  user: Account! @index
  startedAt: BigInt! @index
  shareAmount: BigInt!
  status: String! # "pending", "completed", "cancelled", "expired"
  redeemableAt: BigInt!
  expiresAt: BigInt!
  transaction: String! # ref to StakingTransaction
  redemptionTransaction: String # ref to redeem StakingTransaction if redeemed
}

type Account @entity(immutable: false) {
  id: ID! # user address
  balance: BigInt!
  totalWrappedFlr: BigInt!
  totalTransferred: BigInt!
  totalTransferredWrapped: BigInt!
  totalReceived: BigInt!
  totalReceivedWrapped: BigInt!
  allowances: [Allowance!]! @derivedFrom(field: "owner")
  unlockRequests: [UnlockRequest!]! @derivedFrom(field: "user")
  transactions: [StakingTransaction!]! @derivedFrom(field: "user")
  lastUpdated: BigInt! @index
  lockedBalance: BigInt! # sFLR locked in kSFLR
}

type Allowance @entity(immutable: false) {
  id: ID! # owner-spender
  owner: Account!
  spender: String! @index
  amount: BigInt!
  lastUpdated: BigInt! @index
}

type WrappedAllowance @entity(immutable: false) {
  id: ID! # owner-spender
  owner: Account!
  spender: String! @index
  amount: BigInt!
  lastUpdated: BigInt! @index
}

type UserMetric @entity(immutable: false) {
  id: ID! # user address
  currentShares: BigInt!
  totalStaked: BigInt!
  totalUnstaked: BigInt!
  totalRewardsEarned: BigInt!
  lastInteractionTime: BigInt! @index
  transactionCount: BigInt!
  custodiedShares: BigInt!
  activeUnlockRequestCount: Int!
  totalTransferCount: BigInt!
  totalRewardsClaimed: BigInt!
  firstInteractionTime: BigInt! @index
}

type UserReward @entity(immutable: false) {
  id: ID!
  user: String! @index
  rewardType: Int! @index
  amount: BigInt!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
  shareBalance: BigInt!
  totalShares: BigInt!
}

type AccrueReward @entity(immutable: false) {
  id: ID!
  timestamp: BigInt! @index
  userRewardAmount: BigInt!
  protocolRewardAmount: BigInt!
  rewardType: Int @index
  isExtended: Boolean!
  schemaVersion: Int!
  blockNumber: BigInt! @index
  transactionHash: String! @index
}

type ExchangeRate @entity(immutable: false) {
  id: ID!
  rate: BigInt! @index
  timestamp: BigInt! @index
}

type StakingState @entity(immutable: false) {
  id: ID!
  totalShares: BigInt!
  totalPooledFlr: BigInt!
  timestamp: BigInt! @index
  stakerCount: BigInt!
}

type InvalidRewardTypeCounter @entity(immutable: false) {
  id: ID!
  count: BigInt!
}

type ProtocolConfig @entity(immutable: false) {
  id: ID!
  timestamp: BigInt! @index
  cooldownPeriod: BigInt!
  redeemPeriod: BigInt!
  totalPooledFlrCap: BigInt!
  protocolRewardShare: BigInt!
  protocolRewardRecipient: String
  mintingPaused: Boolean!
  buyInStakingFee: BigInt!
}

type ConfigChange @entity(immutable: false) {
  id: ID!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  parameter: String!
  oldValue: String!
  newValue: String!
  transactionHash: String! @index
}

type LiquidationEvent @entity(immutable: false) {
  id: ID!
  liquidator: Account! @index
  liquidatedUser: Account! @index
  kSFLRAmount: BigInt!
  timestamp: BigInt! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
}
